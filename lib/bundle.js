// Generated by CoffeeScript 1.10.0
(function() {
  var MainView, SigilView, applyNumbers, digest, findNumberCoords, flatten, generateGrid, generatePath, getBBoxes, getBaseChars, getNumVal, getSeedNum, jupiter, kameas, luna, mars, mercury, myView, numerology, renderKamea, renderPath, saturn, sol, template, venus;

  numerology = {
    'A': 1,
    'B': 2,
    'C': 3,
    'D': 4,
    'E': 5,
    'F': 6,
    'G': 7,
    'H': 8,
    'I': 9,
    'J': 10,
    'K': 20,
    'L': 30,
    'M': 40,
    'N': 50,
    'O': 60,
    'P': 70,
    'Q': 80,
    'R': 90,
    'S': 100,
    'T': 200,
    'U': 300,
    'V': 400,
    'W': 500,
    'X': 600,
    'Y': 700,
    'Z': 800
  };

  getNumVal = function(str) {
    var arr, numbers;
    arr = str.replace(/[^a-zA-Z ]/g, "").toUpperCase().split("").filter(function(value) {
      return !(value === " ");
    });
    numbers = [];
    arr.forEach((function(val) {
      return numbers.push(numerology[val]);
    }));
    return numbers.reduce((function(x, y) {
      return x + y;
    }));
  };

  getSeedNum = function(num) {
    var arr, result;
    arr = num.toString().split("").map((function(x) {
      return +x;
    }));
    while (arr.length > 1) {
      result = arr;
      result = result.reduce((function(x, y) {
        return x + y;
      }));
      arr = result.toString().split("").map(function(x) {
        return +x;
      });
    }
    while (arr[0] < 3) {
      arr[0] = arr[0] + 1;
    }
    return arr[0];
  };

  getBaseChars = function(str) {
    var arr, result;
    arr = str.replace(/[^a-zA-Z ]/g, "").toUpperCase().split("").filter((function(x) {
      return !(x === " ");
    }));
    result = [];
    arr.forEach((function(x) {
      if (!(result.includes(x))) {
        return result.push(x);
      }
    }));
    return result;
  };

  digest = function(str) {
    var result;
    return result = {
      BaseChars: getBaseChars(str),
      NumVal: getNumVal(str),
      SeedNum: getSeedNum(getNumVal(str))
    };
  };

  saturn = [[4, 9, 2], [3, 5, 7], [8, 1, 6]];

  jupiter = [[4, 14, 15, 1], [9, 7, 6, 12], [5, 11, 10, 8], [16, 2, 3, 13]];

  mars = [[11, 24, 7, 20, 3], [4, 12, 25, 8, 16], [17, 5, 13, 21, 9], [10, 18, 1, 14, 22], [23, 6, 19, 2, 15]];

  sol = [[6, 32, 3, 34, 35, 1], [7, 11, 27, 28, 8, 30], [19, 14, 16, 15, 23, 24], [18, 20, 22, 21, 17, 13], [25, 29, 10, 9, 26, 12], [36, 5, 33, 4, 2, 31]];

  venus = [[22, 47, 16, 41, 10, 35, 4], [5, 23, 48, 17, 42, 11, 29], [30, 6, 24, 49, 18, 36, 12], [13, 31, 7, 25, 43, 19, 37], [38, 14, 32, 26, 44, 20], [21, 39, 8, 33, 2, 27, 45], [46, 15, 40, 9, 34, 3, 28]];

  mercury = [[8, 58, 59, 5, 4, 62, 63, 1], [49, 15, 14, 52, 53, 11, 10, 56], [41, 23, 22, 44, 45, 19, 18, 48], [32, 34, 35, 29, 28, 38, 39, 25], [40, 26, 27, 37, 36, 30, 31, 33], [17, 47, 46, 20, 21, 43, 42, 24], [9, 55, 54, 12, 13, 51, 50, 16], [64, 2, 3, 61, 60, 6, 7, 57]];

  luna = [[37, 78, 29, 70, 21, 62, 13, 54, 5], [6, 38, 79, 30, 71, 22, 63, 14, 46], [47, 7, 39, 80, 31, 72, 23, 55, 15], [16, 48, 8, 40, 81, 32, 64, 24, 56], [57, 17, 49, 9, 41, 73, 33, 65, 25], [26, 58, 18, 50, 1, 42, 74, 34, 66], [67, 27, 59, 10, 51, 2, 43, 75, 35], [36, 68, 19, 60, 11, 52, 3, 44, 76], [77, 28, 69, 20, 61, 12, 53, 4, 45]];

  kameas = {
    3: saturn,
    4: jupiter,
    5: mars,
    6: sol,
    7: venus,
    8: mercury,
    9: luna
  };

  flatten = function(arr) {
    return [].concat.apply([], arr);
  };

  generateGrid = function(parent, num, totalWidth, totalHeight) {
    var bbox, cx, cy, i, row, rows, sub_i;
    i = 0;
    cx = 0;
    cy = 0;
    rows = [];
    bbox = {};
    while (num > i) {
      row = [];
      sub_i = 0;
      cx = 0;
      while (num > sub_i) {
        row.push(parent.rect(cx, cy, totalWidth / num, totalHeight / num));
        row[sub_i].attr({
          'stroke-width': 3,
          'fill': 'lightgray'
        });
        bbox = row[sub_i].getBBox();
        cx = cx + bbox.width;
        sub_i++;
      }
      rows.push(row);
      cy = cy + bbox.height;
      i++;
    }
    return rows;
  };

  getBBoxes = function(grid) {
    var cell, j, k, len, len1, result, row, sub;
    result = [];
    for (j = 0, len = grid.length; j < len; j++) {
      row = grid[j];
      sub = [];
      for (k = 0, len1 = row.length; k < len1; k++) {
        cell = row[k];
        sub.push(cell.getBBox());
      }
      result.push(sub);
    }
    return result;
  };

  applyNumbers = function(parent, bboxGrid, kamea) {
    var cell, i, num, result, sub, sub_i;
    result = [];
    i = 0;
    while (bboxGrid.length > i) {
      sub = [];
      sub_i = 0;
      while (bboxGrid.length > sub_i) {
        cell = bboxGrid[i][sub_i];
        num = kamea[i][sub_i];
        sub.push(parent.text(cell.cx, cell.cy, num + '').attr({
          'fill': 'black',
          'font-size': 20
        }));
        sub_i++;
      }
      result.push(sub);
      i++;
    }
    return result;
  };

  renderKamea = function(parent, int, size) {
    var bboxes, canvas, grid, numbers;
    if (int < 3) {
      return console.error('Select Number between 3 to 9');
    } else if (int > 9) {
      return console.error('Select Number between 3 to 9');
    } else {
      canvas = Raphael(parent, size, size);
      grid = generateGrid(parent, int, size, size);
      bboxes = getBBoxes(grid);
      numbers = applyNumbers(parent, bboxes, kameas[int]);
      return {
        'canvas': canvas,
        'grid': grid,
        'bboxes': bboxes,
        'numbers': numbers
      };
    }
  };

  findNumberCoords = function(arrOfTargets, gridOfNumbers) {
    var j, k, len, len1, newArr, num, obj, result, targets;
    targets = [];
    result = [];
    newArr = flatten(gridOfNumbers);
    for (j = 0, len = arrOfTargets.length; j < len; j++) {
      num = arrOfTargets[j];
      targets.push(newArr.filter(function(x) {
        if (x.attrs.text === num + '') {
          return x;
        }
      })[0]);
    }
    for (k = 0, len1 = targets.length; k < len1; k++) {
      obj = targets[k];
      result.push({
        x: obj.getBBox().cx,
        y: obj.getBBox().cy
      });
    }
    return result;
  };

  generatePath = function(arrOfCoords) {
    var coord, j, len, subResult;
    subResult = [];
    for (j = 0, len = arrOfCoords.length; j < len; j++) {
      coord = arrOfCoords[j];
      if (coord === arrOfCoords[0]) {
        subResult.push("M" + coord.x + "," + coord.y);
      } else {
        subResult.push("L" + coord.x + "," + coord.y);
      }
    }
    return subResult.join(" ");
  };

  renderPath = function(parent, pathString) {
    return parent.path(pathString).attr({
      'stroke-width': 3,
      'stroke': 'white'
    });
  };

  template = {};

  template.main = function() {
    return "<div class='w3-container w3-light-grey'>\n\n	<div class='w3-container w3-rest'>\n		<h1>Sigil Pal</h1>\n		<h3>automated Statement of intent processor</h3>\n	</div>\n	\n	<div class='w3-container w3-third'>\n		<textarea type='text' id='soi' placeholder='type your intent here' style='resize:none;width:100%;height:100%'></textarea>\n		<br />\n		<button id='process' class='w3-btn-block'>Process Statement of Intent</button>\n	</div>\n	\n	<div class='w3-container w3-rest'>\n		<div id='result'></div>\n		<div id='sigil'></div>\n		<br />\n		<p>To find more info on the process of</p>\n		<p>sigilization and magick in general</p>\n		<p>go <a href='http://www.excommunicate.com/basics-in-sigil-creation-or-the-only-magic-guaranteed-to-work/#axzz4Ej3q2KlR'>here</a> or <a href='http://www.chaosmatrix.org/library/chaos_all.php'>here</a> for more detailed information.</p>\n	</div> \n	<div class='w3-container w3-rest'>\n		<h4><a href='https://github.com/theblacksquid'>@theblacksquid</a> 2016</h4>\n	</div>\n</div>";
  };

  template.result = function(input) {
    return "<div>\n	<h3>" + ($('#soi').val()) + "</h3>\n	<p>Base Letters: " + input.BaseChars + "</p>\n	<p>Numeric Value: " + input.NumVal + "</p>\n	<p>Seed Number: " + input.SeedNum + "</p>\n</div>";
  };

  SigilView = (function() {
    function SigilView(el) {
      this.el = el;
    }

    return SigilView;

  })();

  MainView = (function() {
    function MainView(el) {
      this.el = el;
    }

    MainView.prototype.render = function() {
      $(this.el).html(template.main());
      return this.resultView();
    };

    MainView.prototype.resultView = function() {
      return $("#process").click(function() {
        var text;
        text = $("#soi").val();
        return $("#result").html(template.result(digest(text)));
      });
    };

    return MainView;

  })();

  myView = new MainView("#app");

  myView.render();

}).call(this);
